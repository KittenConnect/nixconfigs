name: Nix Flake actions

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true # TODO: pass it to false

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    - 'releases/**'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write


jobs:
  nix-matrix:
    name: Register all build jobs
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
        # with: 
        #   install_url: https://install.lix.systems/lix
        #   install_options: install --no-confirm
        # 
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json -f ./ci/workflows.nix)"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  build-nix:
    name: Build all nix versions
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{steps.upload.outputs.artifact_id}}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
        # with: 
        #   install_url: https://install.lix.systems/lix
        #   install_options: install --no-confirm
      
      - id: build-all-nix
        name: Build Nix packages
        run: |
          set -Eeu
          
          while read -r OUT <&3; do
            nix copy --no-check-sigs --to "file://$PWD/nixPackages" "$OUT"
            mkdir -vp "$PWD/nixPackages/result"
            for l in $(find "$OUT" -type l -maxdepth 1 -print); do
              ln -sf $(readlink -f $l) "$PWD/nixPackages/result/$(basename $l)"
            done 
          done 3< <(nix build --print-out-paths -L -f ci/build-all-nix.nix _allPackages)
      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: toplevel-all-nixPackages
          path: nixPackages

  build-toplevel:
    name: "nix: ${{ matrix.name }} (${{ matrix.system }})"
    needs: [nix-matrix, build-nix]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.nix-matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
        # with:
        #   install_url: https://install.lix.systems/lix
        #   install_options: install --no-confirm

      # - name: Download Nix versions
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: nixVersions
      #     pattern: toplevel-all-nixPackages

      - name: Nix build ${{matrix.name}}
        id: nix-toplevel
        run: |
          set -Eeu
          while IFS= read -r storePath <&3; do
            nix copy --to file://$PWD/'toplevel-${{matrix.name}}' $storePath
            echo "toplevel=$storePath" | tee -a "$GITHUB_OUTPUT" 
          done 3< <(nix build --print-out-paths -L -f '${{ matrix.file }}' '${{ matrix.attr }}' | tee 'storePath-${{ matrix.name }}')

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: toplevel-${{matrix.name}}
          path: toplevel-${{matrix.name}}

      # - uses: actions/upload-artifact@v4
      #   id: artifact-upload-storePath
      #   with:
      #     name: storepath-${{matrix.name}}
      #     path: storepath-${{matrix.name}}

       ## Write for matrix outputs workaround 
      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.attr }}
          outputs: |
            artifact: ${{ toJson(steps.artifact-upload-step.outputs) }}
            toplevel: ${{ steps.nix-toplevel.outputs.toplevel }}


          
  # Single deploy job since we're just deploying
  nix-pages:
    needs: build-toplevel
    # environment:
    #   name: github-pages
    #   url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    # on: Runs on pushes targeting the default branch
    #  push:
    #   branches: ["main"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Setup Pages
      #   uses: actions/configure-pages@v5
        
  
      - uses: cloudposse/github-action-matrix-outputs-read@v1
        id: read
        with:
          matrix-step-name: build

      # - name: Download All Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: outputs
      #     pattern: toplevel-*
      #     merge-multiple: true
      - name: Deploy artifact
        env:
          ARTIFACTS: ${{ toJson(fromJson(steps.read.outputs.result).artifact) }}
        run: echo "Deploying artifact from $ARTIFACTS"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: 'outputs'
      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4