name: Nix Flake actions

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true # TODO: pass it to false

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    - 'releases/**'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write


jobs:
  nix-init:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
        # with: 
        #   install_url: https://install.lix.systems/lix
        #   install_options: install --no-confirm
        # 
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json -f ./ci/workflows.nix)"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  nix-prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
        # with: 
        #   install_url: https://install.lix.systems/lix
        #   install_options: install --no-confirm
      
      - id: build-all-nix
        name: Build Nix packages
        run: |
          set -Eeu
          
          mkdir -vp outputs

          nix build -L -f ci/build-all-nix.nix _allPackages -o result-allNix
          readlink -f result-allNix/* | sort -u | xargs nix copy --to file://$PWD/nixPackages
      - uses: actions/upload-artifact@v4
        with:
          name: toplevel-all-nixPackages
          path: nixPackages

  nix-build:
    name: ${{ matrix.name }} (${{ matrix.system }})
    needs: [nix-init, nix-prepare]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.nix-init.outputs.matrix)}}
    outputs:
      toplevel: ${{ steps.artifact-upload-step.outputs.artifact_id }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
        # with:
        #   install_url: https://install.lix.systems/lix
        #   install_options: install --no-confirm

      - run: |
          set -Eeu
          nix build --print-out-paths -L -f '${{ matrix.file }}' '${{ matrix.attr }}' | xargs nix copy --to file://$PWD/'toplevel-${{matrix.name}}' 

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: toplevel-${{matrix.name}}
          path: toplevel-${{matrix.name}}

  # Single deploy job since we're just deploying
  nix-pages:
    needs: nix-build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    # on: Runs on pushes targeting the default branch
    #  push:
    #   branches: ["main"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      # - name: Download All Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: outputs
      #     pattern: toplevel-*
      #     merge-multiple: true
      - name: Deploy artifact
        run: echo "Deploying artifact from $TOPLEVELS"
        env:
          TOPLEVELS: ${{ needs.nix-build.outputs.toplevel }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: 'outputs'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4